"""empty message

Revision ID: 55612bb30efc
Revises: 
Create Date: 2019-02-23 16:59:27.674058

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '55612bb30efc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('debtor',
    sa.Column('debtor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('demurrage_rate', sa.REAL(), nullable=False),
    sa.Column('demurrage_rate_ceiling', sa.REAL(), nullable=False),
    sa.CheckConstraint('demurrage_rate >= 0'),
    sa.CheckConstraint('demurrage_rate_ceiling >= 0'),
    sa.PrimaryKeyConstraint('debtor_id')
    )
    op.create_table('account',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('discount_demurrage_rate', sa.REAL(), nullable=False),
    sa.Column('balance', sa.BigInteger(), nullable=False, comment='The total owed amount'),
    sa.Column('demurrage', sa.BigInteger(), nullable=False, comment='This is the amount of negative interest accumulated on the account. Demurrage accumulates at an annual rate (in percents) that is equal to the minimum of the following values: `account.discount_demurrage_rate`, `debtor.demurrage_rate`, `debtor.demurrage_rate_ceiling`.'),
    sa.Column('avl_balance', sa.BigInteger(), nullable=False, comment='The total owed amount, minus demurrage, minus pending transfer locks'),
    sa.Column('last_transfer_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('demurrage >= 0'),
    sa.CheckConstraint('discount_demurrage_rate >= 0'),
    sa.ForeignKeyConstraint(['debtor_id'], ['debtor.debtor_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id')
    )
    op.create_table('branch',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('branch_id', sa.Integer(), nullable=False),
    sa.Column('info', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['debtor_id'], ['debtor.debtor_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'branch_id')
    )
    op.create_table('coordinator',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['debtor_id'], ['debtor.debtor_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'coordinator_id')
    )
    op.create_table('operator',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('branch_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('alias', sa.String(length=100), nullable=False),
    sa.Column('profile', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('can_withdraw', sa.Boolean(), nullable=False),
    sa.Column('can_audit', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['debtor_id', 'branch_id'], ['branch.debtor_id', 'branch.branch_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'branch_id', 'user_id')
    )
    op.create_table('withdrawal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('operator_branch_id', sa.Integer(), nullable=False),
    sa.Column('operator_user_id', sa.BigInteger(), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('opening_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('closing_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('withdrawal_seqnum', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.ForeignKeyConstraint(['debtor_id', 'operator_branch_id', 'operator_user_id'], ['operator.debtor_id', 'operator.branch_id', 'operator.user_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'withdrawal_seqnum')
    )
    op.create_index('idx_withdrawal_closing_ts', 'withdrawal', ['debtor_id', 'operator_branch_id', 'closing_ts'], unique=False)
    op.create_table('withdrawal_request',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('operator_branch_id', sa.Integer(), nullable=False),
    sa.Column('operator_user_id', sa.BigInteger(), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('opening_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('deadline_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('withdrawal_request_seqnum', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.ForeignKeyConstraint(['debtor_id', 'operator_branch_id', 'operator_user_id'], ['operator.debtor_id', 'operator.branch_id', 'operator.user_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'withdrawal_request_seqnum')
    )
    op.create_index('idx_withdrawal_request_opening_ts', 'withdrawal_request', ['debtor_id', 'operator_branch_id', 'opening_ts'], unique=False)
    op.create_table('prepared_transfer',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('prepared_transfer_seqnum', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_type', sa.SmallInteger(), nullable=False, comment='1 -- circular transfer, 2 -- direct transfer 3 -- third party transfer, '),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('sender_locked_amount', sa.BigInteger(), nullable=False),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('coordinator_id', sa.Integer(), nullable=True),
    sa.Column('withdrawal_request_seqnum', sa.BigInteger(), nullable=True),
    sa.Column('third_party_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('third_party_amount', sa.BigInteger(), nullable=True),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('sender_locked_amount >= 0'),
    sa.CheckConstraint('third_party_amount >= 0'),
    sa.CheckConstraint('transfer_type = 1 AND coordinator_id IS NOT NULL OR transfer_type != 1 AND coordinator_id IS NULL'),
    sa.CheckConstraint('transfer_type = 2 OR withdrawal_request_seqnum IS NULL'),
    sa.CheckConstraint('transfer_type = 3 AND third_party_debtor_id IS NOT NULL AND third_party_amount IS NOT NULL OR transfer_type != 3 AND third_party_debtor_id IS NULL AND third_party_amount IS NULL'),
    sa.ForeignKeyConstraint(['debtor_id', 'coordinator_id'], ['coordinator.debtor_id', 'coordinator.coordinator_id'], ),
    sa.ForeignKeyConstraint(['debtor_id', 'sender_creditor_id', 'withdrawal_request_seqnum'], ['withdrawal_request.debtor_id', 'withdrawal_request.creditor_id', 'withdrawal_request.withdrawal_request_seqnum'], ),
    sa.ForeignKeyConstraint(['debtor_id', 'sender_creditor_id'], ['account.debtor_id', 'account.creditor_id'], ),
    sa.PrimaryKeyConstraint('debtor_id', 'prepared_transfer_seqnum')
    )
    op.create_index('idx_prepared_transfer_sender_creditor_id', 'prepared_transfer', ['debtor_id', 'sender_creditor_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_prepared_transfer_sender_creditor_id', table_name='prepared_transfer')
    op.drop_table('prepared_transfer')
    op.drop_index('idx_withdrawal_request_opening_ts', table_name='withdrawal_request')
    op.drop_table('withdrawal_request')
    op.drop_index('idx_withdrawal_closing_ts', table_name='withdrawal')
    op.drop_table('withdrawal')
    op.drop_table('operator')
    op.drop_table('coordinator')
    op.drop_table('branch')
    op.drop_table('account')
    op.drop_table('debtor')
    # ### end Alembic commands ###
